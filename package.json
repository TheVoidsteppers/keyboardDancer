{
  "name": "keyboard-dancer",
  "displayName": "keyboardDancer",
  "scripts": {
    "test": "node ./out/test/runTests.js",
    "pretest": "tsc -p ./",
    "vscode:prepublish": "npm run package && npm run package-web",
    "package": "webpack --mode production --config ./build/node-extension.webpack.config.js",
    "compile": "webpack --config ./build/node-extension.webpack.config.js",
    "watch": "webpack --watch --config ./build/node-extension.webpack.config.js",
    "compile-web": "webpack --config ./build/web-extension.webpack.config.js",
    "watch-web": "webpack --watch --config ./build/web-extension.webpack.config.js",
    "package-web": "webpack --mode production --config ./build/web-extension.webpack.config.js",
    "lint": "tslint -p ./"
  },
  "description": "Keymaps",
  "version": "0.0.7",
  "engines": {
    "vscode": "^1.67.0"
  },
  "publisher": "TheVoidsteppers",
  "repository": {
    "type": "git",
    "url": "https://github.com/TheVoidsteppers/keyboardDancer.git"
  },
  "license": "MIT",
  "keywords": [
    "Keymaps",
    "Importer",
    "Settings",
    "vi",
    "vim"
  ],
  "categories": [
    "Keymaps"
  ],
  "main": "./dist/extension.js",
  "browser": "./dist/web/extension.js",
  "preview": false,
  "contributes": {
    "menus": {
      "commandPalette": [
        {
          "command": "extension.keyboardDancer.importFromKeyboardDancer",
          "when": ""
        }
      ]
    },
    "commands": [
      {
        "command": "extension.keyboardDancer.importFromKeyboardDancer",
        "title": "Keyboard Dancer Keymap: Import Keyboard Dancer Settings"
      },
      {
        "command": "extension.keyboardDancer.console.log.variable",
        "title": "Wrap down console.log as variable"
      },
      {
        "command": "extension.keyboardDancer.console.log.string",
        "title": "Wrap down console.log as string"
      }
    ],
    "keybindings": [
      {
        "key": "ctrl+shift+c",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!terminalFocus"
      },
      {
        "key": "ctrl+k",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "panelFocus && activePanel"
      },
      {
        "key": "ctrl+h",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "panelFocus && activePanel"
      },
      {
        "key": "ctrl+j",
        "command": "vim.remap",
        "when": "vim.mode == 'Normal' && !suggestWidgetVisible && !inQuickOpen",
        "args": {
          "after": [
            "<c-w>",
            "j"
          ]
        }
      },
      {
        "key": "ctrl+k",
        "command": "vim.remap",
        "when": "vim.mode == 'Normal' && !suggestWidgetVisible && !inQuickOpen && !panelFocus",
        "args": {
          "after": [
            "<c-w>",
            "k"
          ]
        }
      },
      {
        "key": "ctrl+h",
        "command": "vim.remap",
        "when": "vim.mode == 'Normal' && !suggestWidgetVisible && !inQuickOpen && !panelFocus",
        "args": {
          "after": [
            "<c-w>",
            "h"
          ]
        }
      },
      {
        "key": "ctrl+l",
        "command": "vim.remap",
        "when": "vim.mode == 'Normal' && !suggestWidgetVisible && !inQuickOpen",
        "args": {
          "after": [
            "<c-w>",
            "l"
          ]
        }
      },
      {
        "key": "tab",
        "command": "extension.multiCommand.execute",
        "args": {
          "sequence": [
            "search.focus.nextInputBox",
            "search.focus.nextInputBox",
            "search.focus.nextInputBox",
            "search.focus.nextInputBox",
            "list.focusFirst"
          ]
        },
        "when": "hasSearchResult && searchViewletFocus"
      },
      {
        "key": "shift+tab",
        "command": "extension.multiCommand.execute",
        "args": {
          "sequence": [
            "search.focus.previousInputBox",
            "search.focus.previousInputBox",
            "search.focus.previousInputBox",
            "search.focus.previousInputBox"
          ]
        },
        "when": "hasSearchResult && searchViewletFocus"
      },
      {
        "key": "o",
        "command": "list.select",
        "when": "listFocus && !inputFocus && hasSearchResult && searchViewletFocus"
      },
      {
        "key": "e",
        "command": "whichkey.triggerKey",
        "when": "whichkeyVisible && sideBarVisible && explorerViewletVisible",
        "args": {
          "key": "e",
          "when": "sideBarVisible && explorerViewletVisible"
        }
      },
      {
        "key": "r",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
      },
      {
        "key": "j",
        "command": "list.focusDown",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
      },
      {
        "key": "k",
        "command": "list.focusUp",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
      },
      {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
      },
      {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
      },
      {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenNavigatePrevious",
        "when": "inQuickOpen"
      },
      {
        "key": "ctrl+shift+j",
        "command": "list.focusDown",
        "when": "panelFocus && activePanel == 'workbench.panel.markers' "
      },
      {
        "key": "ctrl+shift+k",
        "command": "list.focusUp",
        "when": "panelFocus && activePanel == 'workbench.panel.markers' "
      },
      {
        "key": "shift+tab",
        "command": "workbench.action.quickOpenNavigatePrevious",
        "when": "inQuickOpen"
      },
      {
        "key": "enter",
        "command": "list.select",
        "when": "explorerViewletVisible && filesExplorerFocus"
      },
      {
        "key": "o",
        "command": "revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand"
      },
      {
        "key": "j",
        "command": "extension.multiCommand.execute",
        "args": {
          "sequence": [
            "list.focusDown"
          ]
        },
        "when": "listFocus && !inputFocus && panelFocus && !inDebugRepl && references-view.canNavigate"
      },
      {
        "key": "k",
        "command": "extension.multiCommand.execute",
        "args": {
          "sequence": [
            "list.focusUp"
          ]
        },
        "when": "listFocus && !inputFocus && panelFocus && !inDebugRepl && references-view.canNavigate"
      },
      {
        "key": "enter",
        "command": "extension.multiCommand.execute",
        "args": {
          "sequence": [
            "revealReference",
            "closeReferenceSearch"
          ]
        },
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand"
      },
      {
        "key": "enter",
        "command": "extension.multiCommand.execute",
        "args": {
          "sequence": [
            "list.select"
          ]
        },
        "when": "panelFocus && !inDebugRepl && activePanel!='workbench.panel.markers' && reference-list.source == 'callHierarchy' "
      },
      {
        "key": "enter",
        "command": "extension.multiCommand.execute",
        "args": {
          "sequence": [
            "list.select",
            "workbench.action.togglePanel"
          ]
        },
        "when": "panelFocus && !inDebugRepl && activePanel!='workbench.panel.markers' && reference-list.source != 'callHierarchy' "
      },
      {
        "key": "l",
        "command": "list.select",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
      },
      {
        "key": "o",
        "command": "list.toggleExpand",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
      },
      {
        "key": "h",
        "command": "list.collapse",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
      },
      {
        "key": "a",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && !inputFocus"
      },
      {
        "key": "shift+a",
        "command": "explorer.newFolder",
        "when": "filesExplorerFocus && !inputFocus"
      },
      {
        "key": "d",
        "command": "deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
      },
      {
        "key": "ctrl+m",
        "command": "workbench.action.toggleMaximizedPanel",
        "when": "terminalFocus"
      },
      {
        "key": "tab",
        "command": "extension.vim_tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
      },
      {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
      },
      {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
      },
      {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+l",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+j",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
      },
      {
        "key": "ctrl+k",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
      },
      {
        "key": "ctrl+h",
        "command": "file-browser.stepOut",
        "when": "inFileBrowser"
      },
      {
        "key": "ctrl+l",
        "command": "file-browser.stepIn",
        "when": "inFileBrowser"
      },
      {
        "key": "ctrl+h",
        "command": "cursorLeft",
        "when": "editorTextFocus && !suggestWidgetVisible && !suggestWidgetVisible && vim.mode == 'Insert'"
      },
      {
        "key": "ctrl+j",
        "command": "cursorDown",
        "when": "editorTextFocus && !suggestWidgetVisible && !suggestWidgetVisible && vim.mode == 'Insert'"
      },
      {
        "key": "ctrl+k",
        "command": "cursorUp",
        "when": "editorTextFocus && !suggestWidgetVisible && !suggestWidgetVisible && vim.mode == 'Insert'"
      },
      {
        "key": "ctrl+l",
        "command": "cursorRight",
        "when": "editorTextFocus && !suggestWidgetVisible && !suggestWidgetVisible && vim.mode == 'Insert'"
      },
      {
        "key": "ctrl+n",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorTextFocus && vim.mode == 'Normal' || editorTextFocus && vim.mode == 'Visual'"
      },
      {
        "key": "ctrl+p",
        "command": "vim.remap",
        "when": "vim.mode == 'SearchInProgressMode'",
        "args": {
          "after": [
            "<c-r>",
            "+"
          ]
        }
      },
      {
        "key": "f6",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
      },
      {
        "key": "f8",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
      },
      {
        "key": "f4",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
      },
      {
        "key": "f1",
        "command": "whichkey.show"
      },
      {
        "key": "alt+n",
        "command": "workbench.action.files.newUntitledFile",
        "when": "editorFocus && vim.mode == 'Normal'"
      },
      {
        "key": "ctrl+n",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
      },
      {
        "key": "tab",
        "command": "search.action.focusNextSearchResult",
        "when": "inSearchEditor"
      },
      {
        "key": "shift+tab",
        "command": "search.action.focusPreviousSearchResult",
        "when": "inSearchEditor"
      },
      {
        "key": "ctrl+m",
        "command": "search.action.focusQueryEditorWidget",
        "when": "inSearchEditor"
      },
      {
        "key": "ctrl+i",
        "command": "search.action.focusFilesToInclude",
        "when": "inSearchEditor"
      },
      {
        "key": "ctrl+e",
        "command": "search.action.focusFilesToExclude",
        "when": "inSearchEditor"
      },
      {
        "key": "enter",
        "command": "editor.action.revealDefinition",
        "when": "inSearchEditor"
      },
      {
        "key": "enter",
        "command": "-renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
      },
      {
        "key": "ctrl+r",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
      },
      {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
      },
      {
        "key": "shift+tab",
        "command": "-acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
      },
      {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
      },
      {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
      },
      {
        "key": "ctrl+h",
        "command": "-extension.vim_ctrl+h",
        "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
      },
      {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
      },
      {
        "key": "ctrl+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
      },
      {
        "key": "space",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "space",
        "command": "-debug.toggleBreakpoint",
        "when": "breakpointsFocused && !inputFocus"
      },
      {
        "key": "space",
        "command": "-filesExplorer.openFilePreserveFocus",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
      },
      {
        "key": "space",
        "command": "-list.toggleExpand",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "space",
        "command": "-notification.toggle",
        "when": "notificationFocus"
      },
      {
        "key": "space",
        "command": "-refactorPreview.toggleCheckedState",
        "when": "listFocus && refactorPreview.enabled && !inputFocus"
      },
      {
        "key": "tab",
        "command": "-extension.vim_tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
      },
      {
        "key": "f8",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
      },
      {
        "key": "f6",
        "command": "-workbench.action.debug.pause",
        "when": "debugState == 'running'"
      },
      {
        "key": "ctrl+oem_plus",
        "command": "-workbench.action.zoomIn"
      },
      {
        "key": "ctrl+shift+oem_plus",
        "command": "-workbench.action.zoomIn"
      },
      {
        "key": "enter",
        "command": "-revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand"
      },
      {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
      },
      {
        "key": "tab",
        "command": "-insertBestCompletion",
        "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
      },
      {
        "key": "tab",
        "command": "-insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
      },
      {
        "key": "ctrl+0",
        "command": "-workbench.action.focusSideBar"
      },
      {
        "key": "ctrl+oem_minus",
        "command": "-workbench.action.zoomOut"
      },
      {
        "key": "ctrl+oem_comma",
        "command": "-workbench.action.openSettings"
      },
      {
        "key": "shift+alt+down",
        "command": "-extension.vim_cmd+alt+down",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
      },
      {
        "key": "f1",
        "command": "-workbench.action.showCommands"
      },
      {
        "key": "ctrl+j",
        "command": "-extension.vim_ctrl+j",
        "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl"
      },
      {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
      },
      {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
      },
      {
        "key": "ctrl+up",
        "command": "-extension.vim_ctrl+up",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
      },
      {
        "key": "ctrl+down",
        "command": "-extension.vim_ctrl+down",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
      }
    ],
    "configuration": {
      "id": "keyboardDancer",
      "title": "Keyboard Dancer",
      "type": "object",
      "properties": {
        "keyboard-dancer.console.log.functionName": {
          "markdownDescription": "Defines the function to use for default logging with no arguments. See also [`Log String`](#wrap-console-log.format.text.logString).",
          "type": "string",
          "default": "console.log",
          "pattern": "^[a-zA-Z.-]+$"
        },
        "keyboard-dancer.console.log.format": {
          "markdownDescription": "Enables custom control of the default log string. Use `$functoin` to specify the function name defined by [`Log Function`](#wrap-console-log.format.text.textFunction) and `$var` to specify the variable/text to log. `$var` can be specified **one** or **multible** times. ",
          "type": "string",
          "default": "$functoin($var)"
        }
      }
    }
  },
  "extensionDependencies": [
    "vscodevim.vim",
    "VSpaceCode.whichkey",
    "ryuta46.multi-command"
  ],
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.2.2",
    "@types/node": "^12.12.0",
    "@types/vscode": "^1.53.0",
    "@types/relaxed-json": "^1.0.0",
    "glob": "^7.1.6",
    "mocha": "^8.3.2",
    "tslint": "^6.1.3",
    "typescript": "^4.2.3",
    "vscode-test": "^1.5.2",
    "ts-loader": "^8.1.0",
    "webpack": "^5.30.0",
    "webpack-cli": "^4.6.0"
  },
  "dependencies": {
    "relaxed-json": "^1.0.3"
  }
}